'''
    - 시나리오1 : todo(할일) list 앱 개발
        - 조건1 : 할일내용과 할일상태 여러번 저장
        - 조건2 : 저장 , 할일 전체출력 , 상태수정 , 할일삭제
        - 조건3 : 출력 예시
            순번    할일내용    할일상태
            1     파이썬공부      X
            2      운동하기      O

        - 조건4 : 클래스/객체 사용 안함

'''


# [1] 딕셔너리와 리스트를 이영한 메모리 설계
할일목록 = [
    {'할일내용' : '파이썬공부' , '할일상태' : 'X'},
    {'할일내용' : '운동', '할일상태': 'O'} ,
    {'할일내용' : '집가기' , '할일상태' : 'X'}

]
        # 각 딕셔너리 3개를 하나의 리스트에서 관리

# [2] 각 기능들의 함수
def 할일저장( 할일내용 , 할일상태 ) :
    # 매개변수로 부터 전달받은 2개의 값을 이용한 딕셔너리 생성
    dic = { '할일내용' : 할일내용 , '할일상태' : 할일상태}
    # 생성한 딕셔너리를 리스트에 저장
    할일목록.append( dic )
def 할일전체출력() :
    순번 = 0
    for 할일 in 할일목록 :
        순번 += 1
        print(f' { 순번 } \t { 할일['할일내용'] } \t { 할일['할일상태']} ')

# [3] 함수들을 실행하는 코드 ( 실행문 )

while True : # 무한루프 ( 종료조건)
    choose = input('1. 저장 2.전체출력 5.종료 ')
    if choose == '5' :
        break
    if choose == '1' :
        할일내용 = input('할일내용 : ')
        할일상태 = input('상태를 O나 X로 적어주세요')
    # 저장함수 호출
    할일저장( 할일내용 , 할일상태 )
    if choose == '2' :
        할일전체출력()




# 객체와 리스트를 이용한 이용한 메모리 설계

class 할일 :
    def __init__( self , 할일내용 , 할일상태 ):
        self.할일내용 = 할일내용
        self.할일상태 = 할일상태
    # 메소드
    def 할일저장( self ):
        할일목록.append( self )
    # 메소드
    def 출력( self , 순번 ) :
        print(f'{순번} \t {self.할일상태} \t {self.할일상태 }')


할일목록 = [
할일('파이썬' , 'O'),
할일('운동' , 'X'),
할일('집가기' , 'X')
]


# [2]
while True :
    choose = input('1 저장 2 전체출력 5 종료 ')
    if choose == '5' :
        break
    if choose == '1' :
        할일내용 = input('할일내용 : ')
        할일상태 = input('상태를 O나 X로 적어주세요')
        task = 할일( 할일내용 , 할일상태 )
        task.할일저장()
    if choose == '2' :
        순번 = 0
        for 할일 in 할일목록 :
            순번 += 1
            할일.출력(순번)