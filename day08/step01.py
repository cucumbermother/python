# 코드서에 눈으로 안보이는 코드 흐름을 조심
# 1.반복문 2.함수 3.객체

'''
    함수(funtion)란?
        - 함 ( 상자 ) 수 ( 숫자 ) : 숫자들이 들어있는 상자 -> 미리 숫자를 상자에 넣었다
            -> 미리 정의된 숫자들 -> 미리 정의된 코드(명령어)들 -> 왜? 미리 정의된 코드를 재사용 하기 위해
        - ( 수학 ) 두(n)개 변수에 대해 변수에 따른 하나의 결과를 결정 할때
        - ( 컴퓨터 ) 두(n)개 매개변수에 대해 처리하고 하나의 결과를 반환
        - 종류: 1. 정의함수[내가 만든 함수] 2. 라이브러리함수[누군가 미리 만든 함수]
        - 예)
            과일(인수) --> (과일 = 매개변수)믹서기 함수(처리) --> 쥬스(리턴/반환)값
            - 인수 : 함수 밖에서 함수 안으로 넣어주는 수/자료
            - 매개변수 : 함수가 실행될때 함수 안으로 들어오는 수/자료를 저장변수
            - 반환/리턴 : 함수가 종료될때 함수 밖으로 반환/돌려주는 수/자료
'''


# [1] 함수 만들기/정의 한다 # def(difinition) # 함수명 : 임의 # (매개변수) # :
def 믹서기( 과일 ) :
    # : (콜론) #파이썬에서 if , for , 함수정의 등 에서 구역 식별할때 사용되는 특수문자
    print( f'>>믹서기 실행중(쥬스를 만들고 있습니다)>>' ) # 함수가 호출될때 실행되는 코드
    return f'{과일}쥬스' # 함수가 종료될때 반환되는 자료, OO쥬스 # 함수를 호출했던 곳으로 복귀/반환

# [2] 함수 사용/호출 한다 # 함수명 # ( ) 함수에 전달할 인자값(인수)
쥬스컵 = 믹서기( '바나나' )
# 함수를 호출해서 호출과 동시에 '바나나' 문자열 1개 자료들 함수에게 전달해서 처리후 '바나나쥬스' 반환
#반환 받아서 '쥬스컵' 변수에 (반환값 ) 저장
# 쥬스컵 = '바나나쥬스'
print( 쥬스컵 )

# [3] 매개변수와 리턴/반환
# 1. 매개변수 O , 리턴값 O 함수
def add( a , b ) : # def : 함수를 만드는 명령어 #'add' 함수 정의 # (a,b) 해당 함수는 2개의 자료를 받겠다
    result = a + b # 함수가 호출될때 실행하는 실행코드
    return  result # 함수가 종료될때 반환되는 코드 # a와 b를 더한값을 복귀/반환한다.
#2. 함수 호출/사용 # add 함수명( 인수값 , 인수값 ) # 만약에 리턴/반환값이 있으면 변수에 대입할수가 있다
a = add( 3,4 ) # 함수 실행후 a = 7
print( a )

#3. 매개변수 x , 리턴값 O 함수 정의
def say() : # ()소괄호에 아무것도 없으면, 매개변수가 없다는 뜻 , 함수 사용시 함수 안으로 들어오는 자료가 없다.
    return print("Python Hi") # return (1개) 자료 # 함수를 호출했던 곳으로 문자열을 반환
#4. 함수 호출/사용
say()

# 혹은 return에 print를 빼고 변수에 say() 를 저장한후 print(변수) 해도됨

#5. 매개변수 x , 리턴값 x 함수 정의
def say2() : # 매개변수 없다
    print('Hi')
    # return 이 없다

say2()

#6. 매개변수 O, 리턴값 X 함수 정의
def add2( a , b ) : # (a , b) 매개변수는 2개이다
    print( a + b )
    #return이 없다.

#7. 함수 호출/사용 # 리턴값이 없으므로 변수에 대입할 값이 없다
add2 ( 3 , 7 )


# [4] 내가 정의한 함수는 매개변수와 리턴값을 예측이 가능하다.
    # 믹서기를 내가 만들었기 때문에 설명서가 없어도 믹서기를 사용할줄 안다.
    # 남이 만든 믹서기를 사용하기 위해 설명서를 읽고 믹서기를 사용해야 한다.
print() # 출력 기능 , # 매개변수 : 출력할자료 , 반환값 : 없음
# input() # 입력 기능 , # 매개변수 : 출력할자료 , 반환값 : 키보드로부터 입력된 자료

# [5] 인자값과 매개변수를 지정하여 호출하기
def sub( a , b ) : # 매개변수 2개를 받아서 빼기를 실행하는 함수
    result = a - b
    return  result
print( sub( 3,7) )# 함수 호출
    # 인자값 순서는 함수의 매개변수 정의 순으로 대입된다.
print( sub( b = 3 , a = 7) ) # 인자값에 매개병수명을 지정하여 함수에 전달할수 있다

# [6] 매개변수의 갯수가 n개 일때, 가변 매개변수 ( 매개변수 갯수가 정해저 있지 않을때 )
def add_many( *param ) : # 매개변수명 앞에 *(와일드카드)붙이면 여러개의 인자값을 하나의 튜플로 받는다
    print( param )
add_many( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 )
add_many( 1 , 2 , 3)
    # 동일한 함수에 서로 다른 인자값 개수 문제x
# [6-1] 주의할점 : 특정 매개변수와 가변길이 매개변수 같이 사용시 가변길이 매개변수를 맨 뒤에 선언해야 한다
def add_mul( choice , *param ) :
    print( choice )
    print( param )

add_mul( 'hi' , 1 , 2 , 3 , 4, 5)
# def add_mul( *param , * choice ): # *param 같은 가변길이 매개변수 정의는 앞에있으면 안됨
